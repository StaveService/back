require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/album_bookmarks', type: :request do
  let(:current_user) { create(:user) }
  let(:user) { create(:user) }
  let(:album) { create(:album) }
  let(:album_bookmark) { create(:album_bookmark, user: user, album: album) }
  let(:headers) do
    login current_user
    get_auth_params_from_login_response_headers(response)
  end

  context 'POST /users/albums/album_bookmarks' do
    it 'with Authorization header' do
      post album_album_bookmarks_path(album_id: album.id), headers: headers
      expect(response).to have_http_status :created
    end

    it 'without Authorization header' do
      post album_album_bookmarks_path(album_id: album.id)
      expect(response).to have_http_status :unauthorized
    end
  end

  context 'DELETE /users/albums/album_bookmarks' do
    it 'with Authorization header' do
      delete album_album_bookmark_path(album_id: album_bookmark.album_id, id: album_bookmark.id), headers: headers
      expect(response).to have_http_status :no_content
    end

    it 'without Authorization header' do
      delete album_album_bookmark_path(album_id: album_bookmark.album_id, id: album_bookmark.id)
      expect(response).to have_http_status :unauthorized
    end
  end
end
